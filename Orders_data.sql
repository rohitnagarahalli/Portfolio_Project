/*
		

-----------------------------------------------------------------------------------------------------------------------------------

                                                         Queries
                                               
-----------------------------------------------------------------------------------------------------------------------------------*/

-- 1. WRITE A QUERY TO DISPLAY CUSTOMER FULL NAME WITH THEIR TITLE (MR/MS), BOTH FIRST NAME AND LAST NAME ARE IN UPPER CASE WITH 
-- CUSTOMER EMAIL ID, CUSTOMER CREATIONDATE AND DISPLAY CUSTOMERâ€™S CATEGORY AFTER APPLYING BELOW CATEGORIZATION RULES:
	-- i.IF CUSTOMER CREATION DATE YEAR <2005 THEN CATEGORY A
    -- ii.IF CUSTOMER CREATION DATE YEAR >=2005 AND <2011 THEN CATEGORY B
    -- iii.IF CUSTOMER CREATION DATE YEAR>= 2011 THEN CATEGORY C
    
    -- HINT: USE CASE STATEMENT, NO PERMANENT CHANGE IN TABLE REQUIRED. [NOTE: TABLES TO BE USED -ONLINE_CUSTOMER TABLE]
use orders;

SELECT 
CASE
	WHEN CUSTOMER_GENDER = 'M' THEN
	CONCAT('MR',' ', UPPER(CUSTOMER_FNAME),' ' ,UPPER(CUSTOMER_LNAME))
	ELSE
	CONCAT('MS', ' ', UPPER(CUSTOMER_FNAME),' ' ,UPPER(CUSTOMER_LNAME))
END AS CUSTOMER_FULL_NAME,
CUSTOMER_EMAIL,
CUSTOMER_CREATION_DATE,
CASE
	WHEN YEAR(customer_creation_date) < 2005 then 'CATEGORY A'
	WHEN YEAR(customer_creation_date) >= 2005 and YEAR(customer_creation_date) < 2011 then 'CATEGORY B'
	ELSE 'CATEGORY C'
END AS CUSTOMERS_CATEGORY
FROM online_customer;


-- 2. WRITE A QUERY TO DISPLAY THE FOLLOWING INFORMATION FOR THE PRODUCTS, WHICH HAVE NOT BEEN SOLD:  PRODUCT_ID, PRODUCT_DESC, 
-- PRODUCT_QUANTITY_AVAIL, PRODUCT_PRICE,INVENTORY VALUES(PRODUCT_QUANTITY_AVAIL*PRODUCT_PRICE), NEW_PRICE AFTER APPLYING DISCOUNT 
-- AS PER BELOW CRITERIA. SORT THE OUTPUT WITH RESPECT TO DECREASING VALUE OF INVENTORY_VALUE.
	-- i.IF PRODUCT PRICE > 20,000 THEN APPLY 20% DISCOUNT
    -- ii.IF PRODUCT PRICE > 10,000 THEN APPLY 15% DISCOUNT
    -- iii.IF PRODUCT PRICE =< 10,000 THEN APPLY 10% DISCOUNT
    
    -- HINT: USE CASE STATEMENT, NO PERMANENT CHANGE IN TABLE REQUIRED. [NOTE: TABLES TO BE USED -PRODUCT, ORDER_ITEMS TABLE] 
    
SELECT PRODUCT_ID, PRODUCT_DESC, PRODUCT_QUANTITY_AVAIL, PRODUCT_PRICE,
	(PRODUCT_QUANTITY_AVAIL*PRODUCT_PRICE) AS INVENTORY_VALUES, 
CASE
	WHEN PRODUCT_PRICE > 20000 THEN PRODUCT_PRICE - (PRODUCT_PRICE*0.2)
	WHEN PRODUCT_PRICE > 10000 THEN PRODUCT_PRICE - (PRODUCT_PRICE*0.15)
	ELSE PRODUCT_PRICE - (PRODUCT_PRICE*0.1)
END AS NEW_PRICE
FROM PRODUCT
WHERE PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM ORDER_ITEMS)
ORDER BY INVENTORY_VALUES DESC;


-- 3. WRITE A QUERY TO DISPLAY PRODUCT_CLASS_CODE, PRODUCT_CLASS_DESCRIPTION, COUNT OF PRODUCT TYPE IN EACH PRODUCT CLASS, 
-- INVENTORY VALUE (P.PRODUCT_QUANTITY_AVAIL*P.PRODUCT_PRICE). INFORMATION SHOULD BE DISPLAYED FOR ONLY THOSE PRODUCT_CLASS_CODE 
-- WHICH HAVE MORE THAN 1,00,000 INVENTORY VALUE. SORT THE OUTPUT WITH RESPECT TO DECREASING VALUE OF INVENTORY_VALUE.
	-- [NOTE: TABLES TO BE USED -PRODUCT, PRODUCT_CLASS]
    
SELECT pc.PRODUCT_CLASS_CODE, pc.PRODUCT_CLASS_DESC, COUNT(PC.PRODUCT_CLASS_DESC) AS PRODUCT_TYPE_COUNT,
	   SUM(P.PRODUCT_QUANTITY_AVAIL*P.PRODUCT_PRICE) AS INVENTORY_VALUE
FROM PRODUCT p 
JOIN PRODUCT_CLASS pc
ON p.PRODUCT_CLASS_CODE = pc.PRODUCT_CLASS_CODE
GROUP BY pc.PRODUCT_CLASS_CODE, pc.PRODUCT_CLASS_DESC
HAVING SUM(P.PRODUCT_QUANTITY_AVAIL*P.PRODUCT_PRICE)  > 100000
ORDER BY INVENTORY_VALUE DESC;


-- 4. WRITE A QUERY TO DISPLAY CUSTOMER_ID, FULL NAME, CUSTOMER_EMAIL, CUSTOMER_PHONE AND COUNTRY OF CUSTOMERS WHO HAVE CANCELLED 
-- ALL THE ORDERS PLACED BY THEM(USE SUB-QUERY)
	-- [NOTE: TABLES TO BE USED - ONLINE_CUSTOMER, ADDRESSS, ORDER_HEADER]

SELECT CUSTOMER_ID,
CONCAT(CUSTOMER_FNAME,' ' , CUSTOMER_LNAME) AS CUSTOMER_FULL_NAME,
 CUSTOMER_EMAIL,
 CUSTOMER_PHONE,
 COUNTRY 
from ONLINE_CUSTOMER AS C
JOIN
 ADDRESS AS A
ON
 C.ADDRESS_ID = A.ADDRESS_ID
WHERE CUSTOMER_ID IN
	(SELECT CUSTOMER_ID FROM ORDER_HEADER WHERE ORDER_STATUS = 'Cancelled');

        
-- 5. WRITE A QUERY TO DISPLAY SHIPPER NAME, CITY TO WHICH IT IS CATERING, NUMBER OF CUSTOMER CATERED BY THE SHIPPER IN THE CITY AND 
-- NUMBER OF CONSIGNMENTS DELIVERED TO THAT CITY FOR SHIPPER DHL(9 ROWS)
	-- [NOTE: TABLES TO BE USED -SHIPPER, ONLINE_CUSTOMER, ADDRESSS, ORDER_HEADER]
    
SELECT S.SHIPPER_NAME, A.CITY, COUNT(DISTINCT oc.Customer_ID) AS NUM_CUSTOMERS_CATERED,
       COUNT(oh.Order_ID) AS NUM_CONSIGNMENTS_DELIVERED
FROM
SHIPPER AS S JOIN ORDER_HEADER AS OH
ON
S.SHIPPER_ID = OH.SHIPPER_ID
JOIN
ONLINE_CUSTOMER AS OC
ON
OH.CUSTOMER_ID = OC.CUSTOMER_ID
JOIN
ADDRESS AS A 
ON OC.ADDRESS_ID = A.ADDRESS_ID
WHERE S.SHIPPER_NAME in ('DHL')
GROUP BY A.CITY;


-- 6. WRITE A QUERY TO DISPLAY CUSTOMER ID, CUSTOMER FULL NAME, TOTAL QUANTITY AND TOTAL VALUE (QUANTITY*PRICE) SHIPPED WHERE MODE 
-- OF PAYMENT IS CASH AND CUSTOMER LAST NAME STARTS WITH 'G'
	-- [NOTE: TABLES TO BE USED -ONLINE_CUSTOMER, ORDER_ITEMS, PRODUCT, ORDER_HEADER]

SELECT oc.CUSTOMER_ID, CONCAT(CUSTOMER_FNAME,' ' , CUSTOMER_LNAME) AS CUSTOMER_FULL_NAME, SUM(oi.PRODUCT_QUANTITY) as TOTAL_QUANTITY,
	SUM(oi.PRODUCT_QUANTITY*p.PRODUCT_PRICE) AS TOTAL_VALUE
FROM online_customer as oc
JOIN
	order_header as oh
ON 
	oc.customer_id = oh.customer_id
JOIN 
	order_items as oi
ON 
	oh.order_id = oi.order_id
JOIN
	product as p
ON 
	oi.product_id = p.product_id
WHERE oh.payment_mode = 'Cash' and oc.customer_lname LIKE 'G%'and oh.order_status = 'Shipped'
GROUP BY CONCAT(CUSTOMER_FNAME,' ' , CUSTOMER_LNAME), OC.CUSTOMER_ID;

    
-- 7. WRITE A QUERY TO DISPLAY ORDER_ID AND VOLUME OF BIGGEST ORDER (IN TERMS OF VOLUME) THAT CAN FIT IN CARTON ID 10  
	-- [NOTE: TABLES TO BE USED -CARTON, ORDER_ITEMS, PRODUCT]
    
SELECT OI.ORDER_ID, (P.LEN*P.WIDTH*P.HEIGHT) AS VOLUME
FROM
ORDER_ITEMS AS OI
JOIN
PRODUCT AS P
ON
OI.PRODUCT_ID = P.PRODUCT_ID
JOIN
CARTON AS C 
ON
C.LEN >= P.LEN AND C.WIDTH >= P.WIDTH AND C.HEIGHT >= P.HEIGHT -- Assuming that the dimensions of the product should be less than or equal to the dimensions of the carton for it to fit
where CARTON_ID = 10 
ORDER BY VOLUME DESC
LIMIT 1; 

-- 8. WRITE A QUERY TO DISPLAY PRODUCT_ID, PRODUCT_DESC, PRODUCT_QUANTITY_AVAIL, QUANTITY SOLD, AND SHOW INVENTORY STATUS OF 
-- PRODUCTS AS BELOW AS PER BELOW CONDITION:
	-- A.FOR ELECTRONICS AND COMPUTER CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY',
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 10% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY', 
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 50% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv.IF INVENTORY QUANTITY IS MORE OR EQUAL TO 50% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
	-- B.FOR MOBILES AND WATCHES CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY', 
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 20% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY',  
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 60% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv.IF INVENTORY QUANTITY IS MORE OR EQUAL TO 60% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
	-- C.REST OF THE CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY', 
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 30% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY',  
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 70% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv. IF INVENTORY QUANTITY IS MORE OR EQUAL TO 70% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
        
			-- [NOTE: TABLES TO BE USED -PRODUCT, PRODUCT_CLASS, ORDER_ITEMS] (USE SUB-QUERY)

-- A) For Electronic and Computer  Categories 
SELECT p.PRODUCT_ID, PRODUCT_DESC, PRODUCT_QUANTITY_AVAIL, sum(PRODUCT_QUANTITY) as QUANTITY_SOLD,
CASE
	WHEN sum(product_quantity) = 0 THEN 'no sales in past, give discount to reduce inventory'
	WHEN p.product_quantity_avail < 0.1*(sum(product_quantity)) THEN  'low inventory, need to add inventory'
	WHEN p.product_quantity_avail < 0.5*(sum(product_quantity)) THEN  'medium inventory, need to add some inventory'
	WHEN p.product_quantity_avail >= 0.5*(sum(product_quantity)) THEN  'sufficient inventory'
END AS INVENTORY_STATUS
FROM
order_items as o
JOIN product as p
ON
o.product_id = p.product_id
JOIN product_class as pc
ON 
p.product_class_code = pc.product_class_code
WHERE pc.PRODUCT_CLASS_DESC in ('Electronics', 'Computer')
GROUP BY p.product_id;

-- B.FOR MOBILES AND WATCHES CATEGORIES

SELECT p.PRODUCT_ID, PRODUCT_DESC, PRODUCT_QUANTITY_AVAIL, sum(PRODUCT_QUANTITY) as TOTAL_QUANTITY,
CASE
WHEN sum(product_quantity) = 0 THEN 'no sales in past, give discount to reduce inventory'
WHEN p.product_quantity_avail < 0.2*(sum(product_quantity)) THEN  'low inventory, need to add inventory'
WHEN p.product_quantity_avail < 0.6*(sum(product_quantity)) THEN  'medium inventory, need to add some inventory'
WHEN p.product_quantity_avail >= 0.6*(sum(product_quantity)) THEN  'sufficient inventory'
END AS INVENTORY_STATUS
FROM
order_items as o
JOIN
product as p
ON
o.product_id = p.product_id
JOIN product_class as pc
ON 
p.product_class_code = pc.product_class_code
WHERE pc.PRODUCT_CLASS_DESC in ('Mobiles', 'Watches')
GROUP BY p.product_id;

-- C.FOR Rest of the Category

SELECT p.PRODUCT_ID, PRODUCT_DESC, PRODUCT_QUANTITY_AVAIL, sum(PRODUCT_QUANTITY) as TOTAL_QUANTITY,
CASE
WHEN sum(product_quantity) = 0 THEN 'no sales in past, give discount to reduce inventory'
WHEN p.product_quantity_avail < 0.3*(sum(product_quantity)) THEN  'low inventory, need to add inventory'
WHEN p.product_quantity_avail < 0.7*(sum(product_quantity)) THEN  'medium inventory, need to add some inventory'
WHEN p.product_quantity_avail >= 0.7*(sum(product_quantity)) THEN  'sufficient inventory'
END AS Inventory_Status
FROM
order_items as o
JOIN product as p
ON 
o.product_id = p.product_id
JOIN product_class as pc
ON
p.product_class_code = pc.product_class_code
WHERE pc.PRODUCT_CLASS_DESC NOT IN ('Electronics', 'Computer', 'Mobiles', 'Watches')
GROUP BY p.product_id;

    
-- 9. WRITE A QUERY TO DISPLAY PRODUCT_ID, PRODUCT_DESC AND TOTAL QUANTITY OF PRODUCTS WHICH ARE SOLD TOGETHER WITH PRODUCT ID 201 
-- AND ARE NOT SHIPPED TO CITY BANGALORE AND NEW DELHI. DISPLAY THE OUTPUT IN DESCENDING ORDER WITH RESPECT TO TOT_QTY.(USE SUB-QUERY)
	-- [NOTE: TABLES TO BE USED -ORDER_ITEMS,PRODUCT,ORDER_HEADER, ONLINE_CUSTOMER, ADDRESS]
    
select p.PRODUCT_ID, p.PRODUCT_DESC, sum(oi.PRODUCT_QUANTITY) as TOT_QTY
from 
order_items oi
join 
product p on oi.PRODUCT_ID = p.PRODUCT_ID
join 
order_header oh on oi.ORDER_ID = oh.ORDER_ID
join 
online_customer oc on oh.CUSTOMER_ID = oc.CUSTOMER_ID
join 
address a on oc.ADDRESS_ID = a.ADDRESS_ID
where 
oi.ORDER_ID in (
        select distinct oh.ORDER_ID
        from 
            order_items oi
        join 
            order_header oh on oi.ORDER_ID = oh.ORDER_ID
        join 
            online_customer oc on oh.CUSTOMER_ID = oc.CUSTOMER_ID
        join 
            address a on oc.ADDRESS_ID = a.ADDRESS_ID
        where
			oh.ORDER_STATUS = 'Shipped'
            and oi.PRODUCT_ID = 201
            and a.CITY not in ('Bangalore', 'New Delhi')
    )
and p.PRODUCT_ID != 201
group by p.PRODUCT_ID, p.PRODUCT_DESC
order by TOT_QTY desc;


-- 10. WRITE A QUERY TO DISPLAY THE ORDER_ID,CUSTOMER_ID AND CUSTOMER FULLNAME AND TOTAL QUANTITY OF PRODUCTS SHIPPED FOR ORDER IDS 
-- WHICH ARE EVENAND SHIPPED TO ADDRESS WHERE PINCODE IS NOT STARTING WITH "5" 
	-- [NOTE: TABLES TO BE USED - ONLINE_CUSTOMER,ORDER_HEADER, ORDER_ITEMS, ADDRESS]
    
SELECT oh.order_id, oh.customer_id, concat(customer_fname, ' ', customer_lname) as customer_fullname,
	sum(product_quantity) as total_quantity
FROM
order_header as oh
JOIN online_customer as oc
ON oh.customer_id = oc.customer_id  
JOIN
order_items as oi 
ON oh.order_id = oi.order_id
JOIN
address as a
ON oc.address_id = a.address_id
WHERE oh.order_status = 'Shipped'
	and oh.order_id % 2 = 0
	and a.pincode NOT LIKE '5%'
GROUP BY oh.order_id, oc.customer_id, concat(customer_fname, customer_lname);
